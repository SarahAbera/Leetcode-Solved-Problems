class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        prefix = [0]
        for i in range(len(nums)):
            prefix.append(prefix[i] + nums[i])
        
        prefix_sum = defaultdict(int)
        count = 0
        for num in prefix:
            if num - goal in prefix_sum:
                count += prefix_sum[num - goal]
            prefix_sum[num] += 1
        
        return count
  
##########################################################################################

class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        
        def helper(nums,goal):
            if goal == -1:
                return 0
            
            left = 0
            count = 0
            runSum = 0
            for right in range(len(nums)):
                runSum += nums[right]
                while runSum > goal:
                    runSum -= nums[left]
                    left += 1
                count += right - left + 1
            
            return count
        
        return helper(nums,goal) - helper(nums,goal-1)  
        
