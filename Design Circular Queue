class MyCircularQueue:

    def __init__(self, k: int):
        self.k = k
        self.queue = [0]*k
        self.front = 0
        self.length = 0
        self.size = 0

    def enQueue(self, value: int) -> bool:
        self.length = self.length % self.k
        if self.size < self.k:
            self.queue[self.length] = value
            self.length = self.length + 1
            self.size += 1
            return True
        return False

    def deQueue(self) -> bool:
        self.front = self.front % self.k
        if self.size != 0:
            self.size -= 1
            self.front = self.front + 1
            return True
        return False

    def Front(self) -> int:
        if self.size > 0:
            return self.queue[self.front % self.k]
        return -1

    def Rear(self) -> int:
        
        if self.size > 0:
            return self.queue[self.length - 1]
        return -1

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.k
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
