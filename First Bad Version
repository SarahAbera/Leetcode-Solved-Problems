# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        low = 1
        high = n

        first_bad = 0
        while low <= high:
            mid = low + (high - low)//2
            if isBadVersion(mid) == False:
                low = mid + 1
            else:
                first_bad = mid
                high = mid - 1

        return first_bad

###########################################################
## General and optimal template for Binary search
###########################################################

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left = -1 # holds the good
        right = n # holds the bad
        while right > left + 1:
            mid = left + (right-left)//2

            if isBadVersion(mid) == True:
                right = mid
            else:
                left = mid
        return right
        
