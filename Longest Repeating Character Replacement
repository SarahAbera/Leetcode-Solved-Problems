class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        count = {}
        left = 0
        result = 0
        for right in range(len(s)):
            count[s[right]] = 1 + count.get(s[right],0)

            while (right - left + 1) - max(count.values()) > k:
                count[s[left]] -= 1
                left += 1
            
            result = max(result,right-left+1)
        return result
        
############################################

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        alphabet = list(alphabet)
        s = list(s)
        longest = 0
        for i in range(26):
            if alphabet[i] not in s:
                continue
            temp = k
            left = 0
            right = 0
            cur_longest = 0
            while right < len(s):
                if right < len(s) and s[right] != alphabet[i]:
                    while  temp == 0:
                        if s[left] != alphabet[i]:
                            temp += 1
                        left += 1
                    
                if s[right] == alphabet[i]:
                    right += 1
                else:
                    if temp > 0:
                        temp -= 1
                        right += 1
                cur_longest = max(cur_longest,right - left)
            cur_longest = max(cur_longest,right - left)
            longest = max(longest,cur_longest)

        return longest
