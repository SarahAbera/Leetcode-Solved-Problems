class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        ans = [0]*len(boxes)
        leftCount, leftCost, rightCount, rightCost, n = 0, 0, 0, 0, len(boxes)
        for i in range(1, n):
            if boxes[i-1] == '1': 
                leftCount += 1
            leftCost += leftCount # each step move to right, the cost increases by # of 1s on the left
            ans[i] = leftCost
        for i in range(n-2, -1, -1):
            if boxes[i+1] == '1': 
                rightCount += 1
            rightCost += rightCount
            ans[i] += rightCost
        return ans
        
  ###########################################
  BRUTE FORCE APPROACH
  ###########################################
  class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        output = []

        for i in range(len(boxes)):
            count = 0
            for j in range(len(boxes)):
                if i != j and boxes[j] == "1":
                    count += abs(j - i)
            output.append(count)
        return output
                    
  #######################################################
  class Solution:
    def minOperations(self, boxes: str) -> List[int]:
       # forward = [0, 0, 0, 0, 0, 0]
       # boxes =   [0, 0, 1, 0, 1, 1]
       #               
       # balls = 0
        forward = [0] * len(boxes)
        balls = 0

        for i in range(1, len(boxes)):
            balls += int(boxes[i-1])
            forward[i] = forward[i-1] + balls

        backward = [0] * len(boxes)
        balls = 0
        for i in range(len(boxes)-2, -1, -1):
            balls += int(boxes[i+1])
            backward[i] = backward[i+1] + balls

        for i in range(len(forward)):
            forward[i] += backward[i]

        return forward
