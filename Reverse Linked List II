# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if head.next == None:
            return head
        dummy = ListNode(0,head)
        cur = dummy
        index = 1
        while index < left:
            cur = cur.next
            index += 1
        start = cur

        cur = head
        index = 1
        while index <  right:
            cur = cur.next
            index += 1
        end = cur.next
        cur.next = None
        
        reversed= self.reverse(start.next)
        start.next = reversed
        cur = reversed
        while cur.next:
            cur = cur.next
        cur.next = end
        return dummy.next
    def reverse(self,left):
        head = left
        prev = None
        while head:
            next = head.next
            head.next = prev
            prev = head
            head = next
        return prev
