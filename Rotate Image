class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        r= len(matrix)
        c = len(matrix[0])
        transpose = [[0]*r for _ in range(c)]
        for i in range(r):
            for j in range(c):
                transpose[j][i] = matrix[i][j]
        
        for i in range(c):
            for j in range(r):
                matrix[j][i] = transpose[j][c-1-i]
        return matrix
Another approach

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        n = len(matrix)
        for row in range(math.ceil(n / 2)):
            for col in range(int(n - n / 2)):
                (
                    matrix[row][col],
                    matrix[~col][row],
                    matrix[~row][~col],
                    matrix[col][~row],
                ) = (
                    matrix[~col][row],
                    matrix[~row][~col],
                    matrix[col][~row],
                    matrix[row][col],
                )
        return matrix
        
